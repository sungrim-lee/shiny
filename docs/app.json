[{"name": "app.py", "content": "from shiny import App, render, ui\n              \nimport pickle\nimport json\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nAB_PATH = 'https://github.com/sungrim-lee/sungrim-lee.github.io/tree/main/myapp/'\n\ndef load_data(path):\n    return pd.read_csv(AB_PATH+path)\n\n\ndef open_json(filename):\n    json_list = []\n    for line in open(filename, 'r'):\n        json_list.append(json.loads(line))\n    return json_list\n\n\ndef get_n_similar_cat(dic, b_cat, n=5):\n    return list(dic[b_cat][:n, 0])\n\n\ndef get_business_info_from_id(b_id):\n    df = load_data('data/city_business.csv')\n    b_info = df[df['business_id'] == b_id]\n    return None if len(b_info) == 0 else b_info\n\n\ndef get_refer_table(b_id, isHighRatings=True):\n    if isHighRatings:\n        df = load_data('data/high_ratings.csv')\n    else:\n        df = load_data('data/low_ratings.csv')\n    return df[df['business_id']==b_id]\n\n\ndef print_business_info(info_row):\n    info_row['postal_code'] = info_row['postal_code'].astype('int64').astype('str')\n    print('Business Name:', info_row['name'].values[0])\n    print('Business Address:', ', '.join(list(info_row[['address', 'city', 'state', 'postal_code']].values[0])))\n    print('Average Stars:', info_row['stars'].values[0])\n    print('Business Categories:', ','.join(info_row['categories']))\n\n\ndef screen_cat(similar_list, arr):\n    for ele in similar_list:\n        if ele in arr:\n            return True\n    return False\n\n\ndef get_potential_reviewers_history_from_today(df1, df2, cat_list, year_diff, isHigh=True):\n    ratings = 5 if isHigh else 1\n    sim_busi_df = df1[df1['categories'].apply(lambda x:screen_cat(cat_list, x))].reset_index(drop=True)\n    ref_df = sim_busi_df[(sim_busi_df['user_id'].isin(df2['user_id'])) & (sim_busi_df['stars']==ratings)].reset_index(drop=True)\n    ref_df['date'] = pd.to_datetime(ref_df['date'])\n\n    recent_time = pd.to_datetime('today').normalize() - pd.DateOffset(years=year_diff)\n    ref_df = ref_df[ref_df['date'] > recent_time].reset_index(drop=True)\n    return ref_df\n\n\ndef get_most_recent_reviews(df):\n    recent_df = df.loc[:, ['user_id', 'date']]\n    if len(recent_df['user_id'].unique()) < 5:\n        recent_idx = df.index\n    else:\n        recent_idx = recent_df[recent_df.groupby(['user_id'], sort=False)['date'].transform(max) == recent_df['date']].index\n    \n    return df.iloc[recent_idx].reset_index(drop=True)\n\n\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Word Count\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_checkbox(\n                \"potential\", \n                \"Potential High Review\", \n                value=True\n            ),\n            ui.input_checkbox(\n                \"history\", \n                \"Positive Review History\", \n                value=True\n            ),\n            ui.input_text(\n                \"text_id\", \n                \"Text input\", \n                placeholder=\"Enter text\"\n            ),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Word Count Plot\")\n    def plot():\n        b_id = input.text_id()\n\n        with open(AB_PATH+'sim.pkl', 'rb') as p:\n            sim_dict = pickle.load(p)\n\n        user_business_df = load_data('data/rating_history.csv')\n        b_info = get_business_info_from_id(b_id)\n        if b_info is None:\n            raise ValueError('No such Business ID')\n        print_business_info(b_info)\n        refer_reviews_df = get_refer_table(b_id, isHighRatings=input.potential()).reset_index(drop=True)\n\n        user_business_df['categories'] = user_business_df['categories'].apply(lambda x: list(set(list(map(str.strip, x.split(','))))) if x is not None else 'None')\n        b_cat = user_business_df[user_business_df['business_id'] == b_id]['categories'].iloc[0][0]\n        similar_cat = list(np.array(sim_dict[b_cat])[:5, 0])\n        similar_cat.insert(0, b_cat)\n\n        ref_df = get_potential_reviewers_history_from_today(user_business_df, refer_reviews_df, similar_cat, year_diff=5, isHigh=input.history())\n        if len(ref_df)==0:\n            raise ValueError('There is no potential review history for this setting')\n            \n        nlp_df = get_most_recent_reviews(ref_df)\n        text_series = nlp_df['text']\n        print(text_series.iloc[0])\n        if len(text_series)==0:\n            raise ValueError('There is no potential review history for this setting')\n        word_count = dict()\n        max_n = 10\n        for row in text_series.apply(lambda x:x.split(' ')):\n            for elem in row:\n                word_count[elem] = word_count.get(elem, 0) + 1\n\n        word_count = {k: v for k, v in sorted(word_count.items(), key=lambda item: item[1], reverse=True)[:max_n]}\n        \n        plt.bar(range(len(word_count)), list(word_count.values()), align='center')\n        plt.xticks(range(len(word_count)), list(word_count.keys()))\n        # plt.set_xticklabels(axes[2].get_xticklabels(), rotation=60)\n        plt.xticks(rotation = 60) \n\n\n\napp = App(app_ui, server)\n\n", "type": "text"}]